@{
    ViewData["Title"] = "Game";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<header class="game-header">
    <h2>Play the exciting game "Snake" created by our students</h2>
    <button class="pixel-tab" onclick="restartGame()">Restart Game</button>
</header>

<section class="watch-video">
    <div class="video-container">
        <div class="video">
            <canvas id="gameCanvas" width="400" height="400"></canvas> <!-- Уменьшаем высоту canvas -->
        </div>
    </div>
</section>

<style>
    .game-header {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
        padding: 20px;
        background-color: #333;
        color: #fff;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        text-align: center;
        position: relative;
        top: 0;
    }

        .game-header h2 {
            margin: 0;
        }

    .pixel-tab {
        font-size: 18px;
        padding: 10px 20px;
        background-color: #4CAF50;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .pixel-tab:hover {
            background-color: #45a049;
        }

    .watch-video {
        display: flex;
        justify-content: center;
        align-items: flex-start; /* Изменено на flex-start */
        padding-top: 20px;
    }

    .video-container {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    canvas {
        border: 1px solid #000;
    }
</style>

<script>
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');

    const gridSize = 20;
    let snake = [{ x: 100, y: 100 }];
    let direction = 'RIGHT';
    let food = {
        x: Math.floor(Math.random() * (canvas.width / gridSize)) * gridSize,
        y: Math.floor(Math.random() * (canvas.height / gridSize)) * gridSize
    };

    document.addEventListener('keydown', (event) => {
        if (event.key === 'ArrowUp' && direction !== 'DOWN') direction = 'UP';
        if (event.key === 'ArrowDown' && direction !== 'UP') direction = 'DOWN';
        if (event.key === 'ArrowLeft' && direction !== 'RIGHT') direction = 'LEFT';
        if (event.key === 'ArrowRight' && direction !== 'LEFT') direction = 'RIGHT';
    });

    function update() {
        const head = { ...snake[0] };
        if (direction === 'UP') head.y -= gridSize;
        if (direction === 'DOWN') head.y += gridSize;
        if (direction === 'LEFT') head.x -= gridSize;
        if (direction === 'RIGHT') head.x += gridSize;

        if (head.x === food.x && head.y === food.y) {
            food = {
                x: Math.floor(Math.random() * (canvas.width / gridSize)) * gridSize,
                y: Math.floor(Math.random() * (canvas.height / gridSize)) * gridSize
            };
        } else {
            snake.pop();
        }

        if (
            head.x < 0 ||
            head.x >= canvas.width ||
            head.y < 0 ||
            head.y >= canvas.height ||
            snake.some(segment => segment.x === head.x && segment.y === head.y)
        ) {
            snake = [{ x: 100, y: 100 }];
            direction = 'RIGHT';
        }

        snake.unshift(head);

        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = 'red';
        ctx.fillRect(food.x, food.y, gridSize, gridSize);
        ctx.fillStyle = 'green';
        snake.forEach(segment => ctx.fillRect(segment.x, segment.y, gridSize, gridSize));
    }

    let gameLoop = setInterval(update, 100);

    function restartGame() {
        clearInterval(gameLoop);
        snake = [{ x: 100, y: 100 }];
        direction = 'RIGHT';
        food = {
            x: Math.floor(Math.random() * (canvas.width / gridSize)) * gridSize,
            y: Math.floor(Math.random() * (canvas.height / gridSize)) * gridSize
        };
        gameLoop = setInterval(update, 100);
    }
</script>
